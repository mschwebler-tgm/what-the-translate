service: what-the-translate-backend
frameworkVersion: '2'

plugins:
  - serverless-esbuild
  - serverless-offline

custom:
  stackName: ${self:service}-${self:custom.stage}
  stage: dev
  esbuild:
    bundle: true
    minify: false
    exclude:
      - aws-sdk
  translationsBucketName: ${self:custom.stackName}-translations

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  logRetentionInDays: 5
  versionFunctions: false
  deploymentBucket:
    name: what-the-translate-serverless-deployments-${self:custom.stage}
  environment:
    REGION: ${self:provider.region}
    DEFAULT_TRANSLATION_SERVICE: aws
    TRANSLATION_BUCKET_NAME: ${self:custom.translationsBucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "translate:TranslateText"
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - "s3:putObject"
          Resource:
            - Fn::Join:
                - ''
                - - !GetAtt TranslationsBucket.Arn
                  - '/*'
        - Effect: Allow
          Action:
            - "s3:getObject"
          Resource:
            - Fn::Join:
                - ''
                - - !GetAtt TranslationsBucket.Arn
                  - '/*'
        - Effect: Allow
          Action:
            - "s3:deleteObject"
          Resource:
            - Fn::Join:
                - ''
                - - !GetAtt TranslationsBucket.Arn
                  - '/IN_PROGRESS/*'

functions:
  startTranslation:
    handler: src/lambda/startTranslation.default
    events:
      - http:
          path: /translate
          method: POST
  s3TranslationHook:
    handler: src/lambda/s3TranslationHook.default
    timeout: 30
    events:
      - s3:
          bucket: ${self:custom.translationsBucketName}
          event: s3:ObjectCreated:Put
          existing: true

resources:
  Resources:
    TranslationsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.translationsBucketName}
